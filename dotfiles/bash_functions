#!/bin/bash
#	 functions
myfunctions () {
	tail -n+7 ~/.bash_functions | sort | grep " () {" | sed -e 's/() {//g' | column
}

#fg_yellow () {
#	echo -e "[33m$*[39m";
#}

VpN () {
  if [ "$(uname)" = "Darwin" ]; then
    vpnNO=`printf "$(ps ax|grep -v grep|grep 'GooseVPN'|wc -l)"`
  else
    vpnNO=`printf "$(ps ax|grep -v grep|grep 'openvpn --daemon'|wc -l)"`
  fi
  if [[ vpnNO -lt 1 ]]; then
    printf "${eRed}X${eNC}"
  elif [[ vpnNO -gt 1 ]]; then
    printf "${eYellow}${vpnNO}${eNC}"
  else
    printf "${eGreen}V${eNC}"
  fi
}
export -f VpN

# Colors using tput
black () { echo "$(tput setaf 0)$*$(tput setaf 7)"; }
red () { echo "$(tput setaf 1)$*$(tput setaf 7)"; }
export -f red
fg_red () { echo "$(tput setaf 1)$*$(tput setaf 7)"; }
export -f fg_red
fg_red1 () { echo "$(tput setaf 1)$*$(tput setaf 7)"; }
export -f fg_red1
bg_red1 () { echo "$(tput setab 1)$*$(tput sgr0)"; }
export -f bg_red1
green () { echo "$(tput setaf 2)$*$(tput setaf 7)"; }
export -f green
fg_green () { echo "$(tput setaf 2)$*$(tput setaf 7)"; }
export -f fg_green
yellow () { echo "$(tput setaf 3)$*$(tput setaf 7)"; }
export -f yellow
fg_yellow () { echo "$(tput setaf 3)$*$(tput setaf 7)"; }
export -f fg_yellow
blue () { echo "$(tput setaf 4)$*$(tput setaf 7)"; }
magenta () { echo "$(tput setaf 5)$*$(tput setaf 7)"; }
cyan () { echo "$(tput setaf 6)$*$(tput setaf 7)"; }
white () { echo "$(tput setaf 7)$*$(tput setaf 7)"; }
export -f white
f_blink () { echo "$(tput blink)$*$(tput sgr0)"; }
export -f f_blink
f_bold () { echo "$(tput bold)$*$(tput sgr0)"; }
export -f f_bold

center_text () {
	if [[ $# == 0 ]]; then
		echo "Usage: ${funcstack[1]} text columns"
		return 1
	else
		declare -i TERM_COLS="$(tput cols)"
		declare -i str_len="${#1}"
		[[ $str_len -ge $TERM_COLS ]] && {
			echo "$1";
			return 0;
		}

		declare -i filler_len="$(( (TERM_COLS - str_len) / 2 ))"
		[[ $# -ge 2 ]] && ch="${2:0:1}" || ch=" "
		filler=""
		for (( i = 0; i < filler_len; i++ )); do
			filler="${filler}${ch}"
		done

		printf "%s%s%s" "$filler" "$1" "$filler"
		[[ $(( (TERM_COLS - str_len) % 2 )) -ne 0 ]] && printf "%s" "${ch}"
		printf "\n"

		return 0
	fi
}

sshconn () {
	printf "${LC_SSHConn}\n"
}

safe_exit () {
	printf "%s\n" "${1}"
	exit 1
}
export -f safe_exit

tfiles () {
	printf "$(ls -a -1 | wc -l|sed "s/ //g")"
}

dirsize () {
	printf "${1:-$(pwd)} $(ls -hs ${1} | head -1)\n"
}

tsize () {
	printf "$(dirsize ${1:-$(pwd)} | sed "s/.*total //g")"
}

a2roman () {
	if [ -z ${1} ]; then
		printf "Usage: $0 100\n"
		return
	fi
	echo $1 | sed -e 's/1...$/M&/;s/2...$/MM&/;s/3...$/MMM&/;s/4...$/MMMM&/
	s/6..$/DC&/;s/7..$/DCC&/;s/8..$/DCCC&/;s/9..$/CM&/
	s/1..$/C&/;s/2..$/CC&/;s/3..$/CCC&/;s/4..$/CD&/;s/5..$/D&/
	s/6.$/LX&/;s/7.$/LXX&/;s/8.$/LXXX&/;s/9.$/XC&/
	s/1.$/X&/;s/2.$/XX&/;s/3.$/XXX&/;s/4.$/XL&/;s/5.$/L&/
	s/1$/I/;s/2$/II/;s/3$/III/;s/4$/IV/;s/5$/V/
	s/6$/VI/;s/7$/VII/;s/8$/VIII/;s/9$/IX/
	s/[0-9]//g'
}

dec2all () {
	if [ -z ${1} ]; then
		printf "Usage: $0 100\n"
		return
	fi
	if [[ $1 ]]; then
		echo "decimal $1 = binary $(dec2bin $1)"
		echo "decimal $1 = octal $(dec2oct $1)"
		echo "decimal $1 = hexadecimal $(dec2hex $1)"
		echo "decimal $1 = base32 $(dec2b32 $1)"
		echo "decimal $1 = base64 $(dec2b64 $1)"
		echo "deciaml $1 = ascii $(dec2asc $1)"
	fi
}

pause () {
	local prompt="${1:-'Press [$(yellow "Enter")$(white)] to continue...'}"
	read -p "${prompt}"
}
export -f pause

askany () {
	local prompt="${1:-'Press [$(yellow "Any")] to continue...'}"
	read -n 1 -s -r -p "${prompt}"
	printf "\n"
}
export -f askany

ask () {
# https://djm.me/ask
local prompt="${1:-'Continue...'}"
local prompt2 default reply
	while true; do
		if [ "${2:-}" = "Y" ]; then
			prompt2="Y/n"
			default=Y
		elif [ "${2:-}" = "N" ]; then
			prompt2="y/N"
			default=N
		else
			prompt2="y/n"
			default=
		fi
# Ask the question (not using "read -p" as it uses stderr not stdout)
	echo -n "$1 [$prompt2] "
# Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
	read reply </dev/tty
# Default?
	if [ -z "$reply" ]; then
		reply=$default
	fi
# Check if the reply is valid
	case "$reply" in
		Y*|y*) return 0 ;;
		N*|n*) return 1 ;;
	esac
  done
}
export -f ask

readlines () {
	TN=$(cat - | wc -l)
	N="${1:-24}"
#	local line
	local infile="${2:-/dev/stdin}"
	local outfile="${3:-/dev/stdout}"
#	local terminal=$(tty)

# Try reading a single line
#  read line
#  if [ $? -eq 0 ]; then
# Output line
	PageNo=1
	for i in $(seq 1 $TN); do
		read -r line
		if [[ $(( $i % $N )) == 0 ]]; then
			printf "${line}\n" # > ${outfile}
			askany < $terminal
			clear
			((++PageNo))
			printf "Page ${PageNo}...\n"
		else
			printf "${line}\n" #> ${outfile}
		fi
	done < ${infile}
	askany < $terminal
}

del () {
	if [ -z ${1} ]; then
		printf "Usage: $0 File or Folder\n"
		return
	fi
	mv "$@" "${HOME}/.Trash/" 2>/dev/null || \
		mkdir -p "${HOME}/.Trash" && mv "$@" "${HOME}/.Trash/"
}

wordnet () {
	if [ -z ${1} ]; then
		printf "Usage: $0 word\n"
		return
	fi
	curl dict://dict.org/d:${1}:wn
}

hgrep () {
	if [ -z ${1} ]; then
		printf "Usage: $0 lookup-word\n"
		return
	fi
	history | sed s/.*\ \ // | grep $@ | tail -n 30
}

hgrepl () {
	if [ -z ${1} ]; then
		printf "Usage: $0 lookup-word\n"
		return
	fi
	history | sed s/.*\ \ // | grep $@
}

##################################################
# Cp with progress bar (using pv)    #
##################################################

cpprg () {
	if [ -z ${1} ]||[ -z ${2} ]; then
		printf "Usage: $0 File-Folder File-Folder\n"
		return
	fi
  if [ `echo "$2" | grep ".*\/$"` ]
	then
		pv "$1" > "$2""$1"
	else
		pv "$1" > "$2"/"$1"
	fi
}

#decompress_ () {
## Credit goes to: Daenyth
#	if [ -z ${2} ]; then
#		printf "Usage: $0 tarfile.ext File-Folder\n"
#		return
#	fi
#	FILE=$1
#	shift
#	case $FILE in
#		*.tar.bz2) tar cjf $FILE $*  ;;
#		*.tar.gz)  tar czf $FILE $*  ;;
#		*.tgz)     tar czf $FILE $*  ;;
#		*.zip)     zip $FILE $*      ;;
#		*.rar)     rar $FILE $*      ;;
#		*)         echo "Filetype not recognized" ;;
#	esac
#}

compress_ () {
# Credit goes to: Daenyth
	if [ -z ${2} ]; then
		printf "Usage: $0 tarfile.ext File-Folder\n"
		return
	fi
	FILE=$1
	shift
	case $FILE in
		*.tar.bz2) tar cjf $FILE $*  ;;
		*.tar.gz)  tar czf $FILE $*  ;;
		*.tgz)     tar czf $FILE $*  ;;
		*.zip)     zip $FILE $*      ;;
		*.rar)     rar $FILE $*      ;;
		*)         echo "Filetype not recognized" ;;
	esac
}

clock () {
	while true;do clear;echo $(date +"%r");sleep 1;done
}

sqrt () {
	if [ -z ${1} ]; then
		printf "Usage: $0 number\n"
		return
	fi
	echo "sqrt ("$1")" | bc -l
}

dec2asc () {
	if [[ $1 ]]; then
		if [ $(( $1 )) -gt 31 ]; then
			printf $(printf '\%o' $1)
		else
			printf "Non-printable"
		fi
	fi
}

dec2bin () {
	if [[ $1 ]]; then
		echo "obase=2 ; $1" | bc
	fi
}

dec2b64 () {
if [[ $1 ]]; then
	echo "obase=64;$1" | bc
fi
}

dec2b32 () {
	if [[ $1 ]]; then
		echo "obase=32;$1" | bc
	fi
}

dec2hex () {
	if [[ $1 ]]; then
		echo "obase=16 ; $1" | bc
	fi
}

dec2oct () {
	if [[ $1 ]]; then
		echo "obase=8 ; $1" | bc
	fi
}

cvtemp () {
	if [ $# -eq 0 ] ; then
	  echo "
		Usage: $0 temperature[F|C|K]
		where the suffix:
			F	indicates input is in Fahrenheit (default)
	    C	indicates input is in Celsius
			K	indicates input is in Kelvin"
	fi
	unit="$(echo $1|sed -e 's/[-[[:digit:]]*//g' | tr '[:lower:]' '[:upper:]' )"
	temp="$(echo $1|sed -e 's/[^-[[:digit:]]*//g')"
	case ${unit:=F}
		in
		F ) # Fahrenheit to Celsius formula:  Tc = (F -32 ) / 1.8
			farn="$temp"
			cels="$(echo "scale=2;($farn - 32) / 1.8" | bc)"
			kelv="$(echo "scale=2;$cels + 273.15" | bc)";;
		C ) # Celsius to Fahrenheit formula: Tf = (9/5)*Tc+32
			cels=$temp
			kelv="$(echo "scale=2;$cels + 273.15" | bc)"
			farn="$(echo "scale=2;((9/5) * $cels) + 32" | bc)";;
		K ) # Celsius = Kelvin + 273.15, then use Cels -> Fahr formula
			kelv=$temp
			cels="$(echo "scale=2; $kelv - 273.15" | bc)"
			farn="$(echo "scale=2; ((9/5) * $cels) + 32" | bc)"
	esac
	echo "Fahrenheit = $farn"
	echo "Celsius    = $cels"
	echo "Kelvin     = $kelv"
}

allips () {
	ifconfig | awk '/inet / {sub(/addr:/, "", $2); print $2}'
}

apath () {
	if [ $# -lt 1 ] || [ $# -gt 2 ]; then
		echo "Temporarily add to PATH"
		echo "usage: apath [dir]"
	else
		PATH=$1:$PATH
	fi
}

portcheck () {
	if [ -z ${1} ]; then
		printf "Usage: $0 Port#\n"
		return
	fi
	for i in $@
		do 
		curl -s "https://deluge-torrent.org/test-port.php?port=$i" | sed '/^$/d;s/<br><br>/ /g'
		done
}

cdlc () {
	if [ -z ${1} ]; then
		printf "Usage: $0 Directory\n"
		return
	fi
	cd $1 2>/dev/null && lc || printf "Directory \"${1}\" does not exist\n"
}

listallapps () {
	if [ "${OS}" = "Darwin" ]; then
		if [ ${USER} = "root" ]; then
			dfind 'kMDItemContentTypeTree == "com.apple.application"c'
		else
			sudo dfind 'kMDItemContentTypeTree == "com.apple.application"c'
		fi
	else
		if [ ${USER} = "root" ]; then
			dpkg -l
		else
			sudo dpkg -l
		fi
	fi
}

showservices () {
	if [ "${OS}" = "Darwin" ]; then
		if [ ${USER} = "root" ]; then
			launchctl list
		else
			sudo launchctl list
		fi
	else
		if [ ${USER} = "root" ]; then
			systemctl list-unit-files
		else
			sudo systemctl list-unit-files
		fi
	fi
}

convertsecs () {
	h=$(bc <<< "${1}/3600")
	m=$(bc <<< "(${1}%3600)/60")
	s=$(bc <<< "${1}%60")
	printf "%02d:%02d:%02d\n" $h $m $s
}

psinfo () {
	if [ -z ${1} ]; then
		printf "Usage: $0 ProcessName\n"
		return
	fi
  ps -ejf | head -1; ps -ejf | grep ${1}
#	ps aux |grep ${1}
}
export -f psinfo

psmax () {
	if [ "${OS}" = "Darwin" ]; then
		if [ ${USER} = "root" ]; then
			ps -axco pid,ppid,command,%mem,%cpu -r|head -n 20
		else
			sudo ps -axco pid,ppid,command,%mem,%cpu -r|head -n 20
		fi
	else
		if [ ${USER} = "root" ]; then
			ps -axco  pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head --lines=20
		else
			sudo ps -axco  pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head --lines=20
		fi
	fi
}

cleardns () {
	if [ ${OS} = "Darwin" ]; then # Apple
		if [ ${USER} = "root" ]; then
			killall -HUP mDNSResponder && echo macOS DNS Cache Reset
		else
			sudo killall -HUP mDNSResponder && echo macOS DNS Cache Reset
		fi
	elif [ -f "/etc/init.d/networking" ]; then # Linux Ubuntu
		if [ ${USER} = "root" ]; then
			/etc/init.d/networking force-reload && echo Ubuntu DNS Cache Reset
		else
			sudo /etc/init.d/networking force-reload && echo Ubuntu DNS Cache Reset
		fi
	elif [ -f /usr/lib/systemd/system/nscd.service ]; then # Linux Centos 7
		if [ ${USER} = "root" ]; then
			/bin/systemctl restart nscd.service && echo Centos 7 DNS Cache Reset
		else
			sudo /bin/systemctl restart nscd.service && echo Centos 7 DNS Cache Reset
		fi
	else
		printf "Unable to flush DNS Cache...\n"
	fi
}

halt () {
# if user is not root, pass shutdown command via sudo #
	if [ $(hostname -s) != "happy" ]; then
		if [ $UID -ne 0 ]; then
	#		sudo /usr/bin/onedrive-d stop
	#		sudo /etc/init.d/inSyncStorageAll stop
	    sudo shutdown -h now
		else
	#		/usr/bin/onedrive-d stop
	#		/etc/init.d/inSyncStorageAll stop
	    shutdown -h now
		fi
	else
		printf "halt not available on $(hostname -s)"
	fi
}

reboot () {
# if user is not root, pass shutdown command via sudo #
	if [ $UID -ne 0 ]; then
#		sudo /usr/bin/onedrive-d stop
#		sudo /etc/init.d/inSyncStorageAll stop
    sudo shutdown -r now
	else
#		/usr/bin/onedrive-d stop
#		/etc/init.d/inSyncStorageAll stop
    shutdown -r now
	fi
}

osver () {
	echo $(lsb_release -r -s)
}

delhistory () {
	history -c && history -w
}

spamblock () {
#!/bin/bash
	if [ -z ${1} ]; then
		printf "Usage: spamblock -Action EmailAdddress Destination\n"
		printf "	Action -wf (whitelist_from)\n"
		printf "	Action -bf (blacklist_from) - Default\n"
		printf "	Action -wt (whitelist_to)\n"
		printf "	Action -bt (blacklist_to)\n"
		printf "	Action -$(red "del") ($(red "Delete") Email Address)\n"
		printf "Usage: spamblock -Action Destination\n"
		printf "	Action -list (List ALL Email Addresses)\n"
		printf "	Action -show EmailAddress (List Email Address if exists)\n"
		printf "	Action -crs (SA Change required_score)\n"
		printf "	Action -clean Destination (Delete duplcates and sort user_prefs)\n"
		printf "	Default Destination (when not defined) is $(red "ALL") Destinations\n"
		return
	fi
	DestHost="@t4x.biz "
	DestHost2="@t4x.biz:"
#	source ~/.bash_functions
	AllSpamHosts="bram h4hm d4x"
	TempFile=/tmp/temp
	if [[ ${1} = "-"* ]]; then
		Action=${1}
		shift
	else
		Action="-bf"
	fi
	if [[ ${1} =~ .*@.* ]]; then
		EAddress=${1}
		shift
	fi
	if [ -z ${1} ]; then
		SpamHosts="${AllSpamHosts}"
	elif [ -n ${1} ]; then
		TempHosts=""
		for i in "${@}"; do
			if [[ ${AllSpamHosts} == *${i}* ]]; then
				TempHosts="${TempHosts}${i} "
			else
				printf "${i} $(yellow "is a Bad Destination.")\n"
				printf "	$(yellow "It has been removed.")\n"
				askany < $terminal
			fi
			SpamHosts=${TempHosts}
			TempHosts="$(printf "$TempHosts" | tr -d '[:space:]')"
			if [ -z ${TempHosts} ]; then
				printf "\n$(red "No Valid Destinations.")\n"
				printf "Exiting.\n"
				exit 1
			fi
		done
	else
		return
	fi
	case "${Action}" in
		-wf|-fw)
			if [ -n ${EAddress} ]; then
				SaveStr="whitelist_from ${EAddress}"
			else
				return
			fi;;
		-bf|-fb)
			if [ -n ${EAddress} ]; then
				SaveStr="blacklist_from ${EAddress}"
			else
				return
			fi;;
		-wt|-tw)
			if [ -n ${EAddress} ]; then
				SaveStr="whitelist_to ${EAddress}"
			else
				return
			fi;;
		-bt|-tb)
			if [ -n ${EAddress} ]; then
				SaveStr="blacklist_to ${EAddress}"
			else
				return
			fi;;
		-list)
			for SpamDest in ${SpamHosts}; do
				clear
        SpamFile="/home/${SpamDest}/.spamassassin/user_prefs"
				printf "SpamAssassin user_prefs file for $(yellow "${SpamDest}")\n"
				ssh root${DestHost} "cat ${SpamFile}" | grep -v '^$\|^\s*\#' > ${TempFile}
				Rows=$(cat ${TempFile} | wc -l)
				for i in $(seq 1 $Rows); do
					read -r line
					if [[ $(( $i % 23 )) == 0 ]]; then
						printf "${line}\n"
						askany < $terminal
						clear
						printf "user_prefs file for $(yellow "${SpamDest}") continued...\n"
					else
						printf "${line}\n"
					fi
				done < ${TempFile}
				rm ${TempFile}
				askany < $terminal
			done;;
		-del)
			if [ -n ${EAddress} ]; then
				SaveStr="Removing ${EAddress}\n"
				for SpamDest in "${SpamHosts}"; do
          SpamDest=$(echo ${SpamDest} | xargs)
					SpamFile="/home/${SpamDest}/.spamassassin/user_prefs"
					ssh root${DestHost} "grep ${EAddress} ${SpamFile}"
          if ask "$(red "Remove") $(yellow "all the above entires")${NC}?" N; then
						printf "${SaveStr}   from $(yellow "${SpamFile}")\n"
						ssh root${DestHost} "grep -v ${EAddress} ${SpamFile} > temp && mv temp ${SpamFile}"
					else
						printf "${EAddress} not removed from $(yellow "${SpamFile}")\n\n"
					fi
				done
			else
				return
			fi;;
		-show)
			for SpamDest in ${SpamHosts}; do
				clear
        SpamFile="/home/${SpamDest}/.spamassassin/user_prefs"
				printf "SpamAssassin user_prefs file for $(yellow "${SpamDest}")\n"
				ssh root${DestHost} "cat ${SpamFile}" | grep -v '^$\|^\s*\#' | grep ${EAddress} > ${TempFile}
				Rows=$(cat ${TempFile} | wc -l)
				for i in $(seq 1 $Rows); do
					read -r line
					if [[ $(( $i % 23 )) == 0 ]]; then
						printf "${line}\n"
						askany < $terminal
						clear
						printf "user_prefs file for $(yellow "${SpamDest}") continued...\n"
					else
						printf "${line}\n"
					fi
				done < ${TempFile}
				rm ${TempFile}
				askany < $terminal
			done;;
		-crs)
			for SpamDest in ${SpamHosts}; do
				clear
				printf "Changing SA required_score for \"$(yellow "${SpamDest}")\"\n\n"
        SpamFile="/home/${SpamDest}/.spamassassin/user_prefs"
				ssh root${DestHost} "cat ${SpamFile}" > ${TempFile}
				old_score="$(grep '^required_score' ${TempFile}|cut -d ' ' -f2)"
				printf "Currently $(yellow "${SpamDest}") required_score = ${old_score}\n"
				printf "Enter new SA required_score for $(yellow "${SpamDest}"): "; read  new_score
				new_score=${new_score:-5}
				printf "Change SA $(yellow "${SpamDest}") required_score from $(cyan "${old_score}") to $(red "${new_score}")"
				if ask "" N; then # < $terminal
					sed -i -e "s/^required_score .*$/required_score ${new_score}/" ${TempFile}
					scp ${TempFile} root${DestHost2}{SpamFile} >/dev/null 2>&1
					printf "$(yellow "${SpamDest}") required_score changed from $(cyan "${old_score}") to $(red "${new_score}")\n"
					askany < $terminal
					clear
				fi
				cat ${TempFile} | grep -v '^$\|^\s*\#' > "${TempFile}2"
				mv "${TempFile}2" ${TempFile}
				Rows=$(cat ${TempFile} | wc -l)
				for i in $(seq 1 $Rows); do
					read -r line
					if [[ $(( $i % 24 )) == 0 ]]; then
						printf "${line}\n"
						askany < $terminal
						clear
						printf "user_prefs file for $(yellow "${SpamDest}") continued...\n"
					else
						printf "${line}\n"
					fi
				done < ${TempFile}
				rm ${TempFile}
				askany < $terminal
			done
			;;
    -clean)
			clear
			for SpamDest in ${SpamHosts}; do
				printf "Cleaning SpamAssassin user_prefs for $(yellow "${SpamDest}")...\n";
        SpamFile="/home/${SpamDest}/.spamassassin/user_prefs"
        DIR=$(dirname "${SpamFile}")
        ssh root${DestHost} "cd ${DIR}; ~/bin/clean_user_prefs ${SpamDest}"
        printf "user_prefs for $(yellow "${SpamDest}") cleaned & sorted...\n\n"
				askany < $terminal
        printf "\n"
#				clear
			done 
      ;;
		*)
			printf "$(yellow "No such function")\n"
			return;;
	esac;
	if [[ "-fw -wf -fb -bf -tw -wt -tb -bt" =~ .*${Action}.* ]]; then
		printf "Updating..."
		for SpamDest in ${SpamHosts}; do
			SpamFile=/home/${SpamDest}/.spamassassin/user_prefs
			echo "$SaveStr" | ssh root${DestHost} "cat >> ${SpamFile}"
			printf "${SaveStr} in $(yellow "${SpamDest}")\n"
		done
	fi
	printf "\n"
}

serverfind () {
  egrep ${1:-Boise} ~/SpeedTestServers
}

speed () {
  if [ "$1" = "" ]; then
    SpeedServer='8182' # boise
  else
    case "$1" in
      denver) SpeedServer='8862'
      ;;
      germany) SpeedServer='7560'
      ;;
      list) SpeedServer='list'
      ;;
      la) SpeedServer='17527'
      ;;
      seattle) SpeedServer='8864'
      ;;
      nj) SpeedServer='1769'
      ;;
      *) SpeedServer='8182'
      ;;
    esac
  fi
  if [ "$1" = "list" ]; then
    speedtest-cli --list
  else
    printf "Generating New SpeedTestServers list...\n"
    speedtest-cli --list > ~/SpeedTestServers
    SpeedServer="$(printf "%5s" "$SpeedServer")"
    printf "$(grep "${SpeedServer}" ~/SpeedTestServers)...\n"
    speedtest-cli --server ${SpeedServer} --simple
  fi
}

tab () {
	printf "\[\e]0;$*\007\]"   
#	printf "\033]0;$*\007"   
}

mkuserfile () {
(
	pushd ~ > /dev/null 2>&1
	if [ -e .bash_aliases ]||[ -e .bash_apple ]||[ -e .bash_linux ]; then
		mkdir -p save
		mv .bash_aliases .bash_apple .bash_linux save >/dev/null 2>&1 
	fi
	tar cvzf UserFiles.tgz .ssh/config .bash_login .config/neofetch/config.conf .profile .bash_colors .bash_shver .bash_PATH .bash_profile .bashrc .bash_machine .bash_functions .vimrc .vim/* >mkuserfiles.out
	printf "  ${eCyan}UserFiles.tgz${eNC} updated...\n"
	popd > /dev/null 2>&1
	dirs -c > /dev/null 2>&1
	) 2>mkuserfiles.err
}

cpuserfiles () { 
( cd ~
printf "$(pwd)"
ScriptName="cpuserfiles"
rm -f ${ScriptName}.*
if [ -z ${1} ]; then
	printf "Usage: cpuserfiles DestUserHost\n"
	return
else
	DestUserHost=${1}
	DestHost=$(printf "${DestUserHost}" | cut -d @ -f2)
	ServerStatus="$(ping -c1 -W1 ${DestHost} > /dev/null && echo "up" || echo "down")"
	StartingHosts=" sneezy "
	LocalHost="$(hostname -s)"
	ThisHost="joe@${LocalHost}"
	SITES2="root@sneezy root@t4x.biz"
	FileName="UserFiles.tgz"
	BackupDir="ufBackup/"
	SkelDir="/etc/skel/"
	VerFile=".bash_shver"
	OldVer="$(< ${VerFile})"
	NewVer="`echo $OldVer + .001 | bc`"
	ThisVer="$OldVer"
	RFolder="~/"
	printf "\n${eNC}Current ${eCyan}${FileName} ${eNC}Version${eNC}:${eGreen}${OldVer}"
	printf "\n${eNC}Increment Version:${eGreen}${OldVer}${eNC} to ${eRed}${NewVer}${eNC} (Y/N)? "
	read answer
	if echo "$answer" | grep -i --color=auto -iq "^y"; then
		ThisVer="${NewVer}"
		echo ${ThisVer} > ${VerFile}
		cp ${FileName} ${BackupDir}${FileName}-${OldVer}
		printf "  Backup... ${eCyan}${FileName}${eNC} to ${eCyan}${FileName}-${OldVer}"
		( cd ${BackupDir};ls -1tr | head -n -20 | xargs -d '\n' rm -f -- )
		rm -f mkuserfile.*	# Delete old .out/.err files
		mkuserfile      # Compile a UserFiles.tgz file
	else
		ThisVer="${OldVer}"
	fi
	printf "${eNC}Update ${eCyan}${FileName}${eNC}(ver:${eRed}${ThisVer}${eNC}) on ${eGreen}${DestUserHost}${eNC}? (Y/N) "
	read answer
	if echo "$answer" | grep -i --color=auto -iq "^y"; then
		SECONDS=0
		DestUser=$(echo ${DestUserHost} | cut -d @ -f1)
		if [ "${ServerStatus}" = "up" ]; then
			if [[ "${StartingHosts}" =~ "${LocalHost}" ]]; then
				printf "${eNC}Updating ${eCyan}${FileName}${eNC} Version:${eRed}${ThisVer}${eNC} to:\n\n"
				if [ ${DestUserHost} != "${ThisHost}" ]; then
					printf "  ${eYellow}${DestUserHost}"
			# 	ssh ${DestUserHost} "rm -rf ~/.swaksp"
					scp -Cp ${FileName} ${DestUserHost}:${RFolder} >/dev/null
					# >> ${ScriptName}.out
					printf "${eNC}${eGreen}."
					ssh ${DestUserHost} "rm -rf ${RFolder}.vim >/dev/null"
					printf "${eNC}${eGreen}."
					cat ${FileName}|ssh ${DestUserHost} "tar xzf - -C ${RFolder}"
					printf "${eGreen}."
					CatVersion=$(ssh ${DestUserHost} "cat ${RFolder}${VerFile}")
					printf "${eNC}(${eCyan}v:${eNC}${CatVersion})"
					printf "${eNC}(skel)"
					if [[ ${SITES2} =~ "${DestUserHost}" ]] && [ ${DestUser} = "root" ]; then
						ssh ${DestUserHost} "cp -a ${RFolder}${FileName} ${SkelDir}"
						printf "${eGreen}."
						cat ${FileName}|ssh ${DestUserHost} "tar xzf - -C ${SkelDir}"
						printf "${eGreen}."
						CatVersion=$(ssh ${DestUserHost} "cat ${SkelDir}${VerFile}")
						printf "${eGreen}."
						printf "${eNC}(${eCyan}v:${eNC}${CatVersion})"
					else
						printf "${eRed} x${eNC}"
					fi
				else
					printf "  ${eYellow}${DestUserHost} "
					printf "%s${eNC}(${eRed}Skipped${eNC})"
				fi
				printf " (${eYellow}$SECONDS sec.${eNC})"
			else
				printf "Must be on \"$(printf "${StartingHosts}" | sed -e 's/ / or /')\" to update servers\n"
			fi
		else
			printf "  ${eYellow}${DestUserHost} "
			printf "%s${eNC}(${eRed}Skipped${eNC} server down)\n"
		fi
	else
		printf "\n${ScriptName} cancelled...\n"
		echo ${OldVer} > ${VerFile}
	fi
fi
printf "\n\n" ) 2>${ScriptName}.err
}

cpalluserfiles () { 
(
cd ~
printf "$(pwd)"
ScriptName="cpalluserfiles"
rm -f ${ScriptName}.*
StartingHosts=" sneezy "
LocalHost="$(hostname -s)"
ThisHost="joe@${LocalHost}"
SITES="joe@doc cissa@doc admin@doc root@doc joe@sleepy cissa@sleepy admin@sleepy root@sleepy joe@sneezy cissa@sneezy root@sneezy joe@spanky cissa@spanky admin@spanky root@spanky cissa@bashful joe@bashful garymartel@bashful root@bashful root@t4x.biz t4xbiz@t4x.biz joe@t4x.biz amanda@t4x.biz contabo@t4x.biz b4x@t4x.biz bram@t4x.biz d4x@t4x.biz h4hm@t4x.biz i4x@t4x.biz joe2@t4x.biz"
#SITES="joe@doc cissa@doc admin@doc root@doc joe@sleepy cissa@sleepy admin@sleepy root@sleepy joe@sneezy cissa@sneezy root@sneezy joe@spanky cissa@spanky admin@spanky root@spanky cissa@bashful joe@bashful garymartel@bashful root@bashful joe@jumpy root@jumpy cissa@jumpy admin@jumpy root@t4x.biz t4xbiz@t4x.biz joe@t4x.biz amanda@t4x.biz contabo@t4x.biz b4x@t4x.biz bram@t4x.biz d4x@t4x.biz h4hm@t4x.biz i4x@t4x.biz joe2@t4x.biz"
SITES2="root@sneezy root@t4x.biz"
STARTT4X="root@t4x.biz"
FileName="UserFiles.tgz"
BackupDir="ufBackup/"
SkelDir="/etc/skel/"
VerFile=".bash_shver"
OldVer="$(< ${VerFile})"
NewVer="`echo $OldVer + .001 | bc`"
ThisVer="$OldVer"
RFolder="~/"
printf "${eNC}Current ${eCyan}${FileName} ${eNC}Version${eNC}: ${eGreen}${OldVer}"
printf "\n${eNC}Increment Version:${eGreen}${OldVer}${eNC} to ${eRed}${NewVer}${eNC} (Y/N)? "
read answer
if echo "$answer" | grep -i --color=auto -iq "^y"; then
	ThisVer="${NewVer}"
	echo "${ThisVer}" > ${VerFile}
	cp ${FileName} ${BackupDir}${FileName}-${OldVer}
	printf "  Backup... ${eCyan}${FileName}${eNC} to ${eCyan}${FileName}-${OldVer}\n"
	(cd ${BackupDir};ls -1tr | head -n -20 | xargs -d '\n' rm -f --)
	rm -f mkuserfile.*	# Delete old .out/.err files
	mkuserfile      # Compile a UserFiles.tgz file
else
	ThisVer="${OldVer}"
fi
printf "${eNC}Update ${eCyan}${FileName}${eNC}(ver:${eRed}${ThisVer}${eNC}) on ${eGreen}All Machines${eNC}? (Y/N) "
read answer
if echo "$answer" | grep -i --color=auto -iq "^y"; then
	start=$(date +'%s')
	printf "${eNC}Updating ${eCyan}${FileName}${eNC} Version: ${eRed}${ThisVer}${eNC} to:\n\n"
	for DestUserHost in ${SITES}
	do
		SECONDS=0
		DestHost=$(printf "${DestUserHost}" | cut -d @ -f2)
		ServerStatus=$(ping -c1 -W1 ${DestHost} > /dev/null && echo "up" || echo "down")
		if [[ "${ServerStatus}" =~ "up" ]]; then
			if [[ "${StartingHosts}" =~ "${LocalHost}" ]]; then
				if [ ${DestUserHost} != "${ThisHost}" ]; then
					DestUser=$(echo ${DestUserHost} | cut -d @ -f1)
					printf "  ${eYellow}${DestUserHost}"
					scp -Cp ${FileName} ${DestUserHost}:${RFolder} >/dev/null
					printf "${eNC}${eGreen}."
			# 	ssh ${DestUserHost} "rm ~/.swaksp >/dev/null"
					ssh ${DestUserHost} "/usr/local/bin/postcpallusrfiles ${RFolder} >/dev/null"
					printf "${eNC}${eGreen}."
			#		cat ${FileName}|ssh ${DestUserHost} "tar xzf - -C ${RFolder}; \
			#				chown ${DestUser} .ssh/config"
			#		printf "${eGreen}."
					CatVersion=$(ssh ${DestUserHost} "cat ${RFolder}${VerFile}")
					printf "${eGreen}."
					printf "${eNC}(${eCyan}v:${eNC}${CatVersion})"
					printf "${eNC}(skel)"
					if [[ ${SITES2} =~ "${DestUserHost}" ]] && [ ${DestUser} = "root" ]; then
			# 	ssh ${DestUserHost} "rm ~/.swaksp >/dev/null"
			#		ssh ${DestUserHost} "cp -a ${RFolder}${FileName} ${SkelDir}"
					ssh ${DestUserHost} "/usr/local/bin/postcpallusrfiles ${SkelDir} >/dev/null"
						printf "${eGreen}."
			#			cat ${FileName}|ssh ${DestUserHost} "tar xzf - -C ${SkelDir}; \
			#				chown ${DestUser} .ssh/config"
			#			printf "${eGreen}."
						CatVersion=$(ssh ${DestUserHost} "cat ${SkelDir}${VerFile}")
						printf "${eGreen}."
						printf "${eNC}(${eCyan}v:${eNC}${CatVersion})"
					else
						printf "${eRed} x${eNC}"
					fi
				else
					printf "  ${eYellow}${DestUserHost} "
					printf "%s${eNC}(${eRed}Skipped${eNC})"
				fi
			else
				printf "Must be on \"$(printf "${StartingHosts}" | sed -e 's/ / or /')\" to update servers\n"
				exit 2
			fi
		else
			printf "  ${eYellow}${DestUserHost} "
			printf "%s${eNC}(${eRed}Skipped${eNC} server down)"
		fi
		printf " (${eYellow}$SECONDS sec.${eNC})\n"
	done
#	(ssh ${STARTT4X} "whmapi1 enable_monitor_all_enabled_services" >/dev/null 2>&1) && printf "Starting cpHulk..."
else
	printf "\n${ScriptName} cancelled...\n"
	echo ${OldVer} > ${VerFile}
fi
printf "\nTotal update time: $(convertsecs $(($(date +'%s') - $start)))\n\n" ) 2>${ScriptName}.err
}

cpallhostsfiles () { 
(
cd /etc
#printf "$(pwd)"
ScriptName="cpallhostsfiles"
rm -f ${ScriptName}.*
StartingHosts=" sneezy "
LocalHost="$(hostname -s)"
ThisHost="joe@${LocalHost}"
SITES="root@doc root@sleepy root@spanky root@bashful root@jumpy"
FileName="hosts"
RFolder="/etc/"
printf "\n${eNC}Update ${eCyan}${RFolder}${FileName} ${eNC}to ${eRed}${RFolder}${FileName}${eNC}) on ${eGreen}All Machines${eNC}? (Y/N) "
read answer
if echo "$answer" | grep -i --color=auto -iq "^y"; then
	start=$(date +'%s')
	printf "${eNC}Updating ${eCyan}${FileName}${eNC} to:\n\n"
	for DestUserHost in ${SITES}
	do
		SECONDS=0
		DestHost=$(printf "${DestUserHost}" | cut -d @ -f2)
		ServerStatus=$(ping -c1 -W1 ${DestHost} > /dev/null && echo "up" || echo "down")
		if [[ "${ServerStatus}" =~ "up" ]]; then
			if [[ "${StartingHosts}" =~ "${LocalHost}" ]]; then
				if [ ${DestUserHost} != "${ThisHost}" ]; then
					DestUser=$(echo ${DestUserHost} | cut -d @ -f1)
					printf "  ${eYellow}${DestUserHost}"
					scp -Cp ${FileName} ${DestUserHost}:${RFolder} >/dev/null
					printf "${eNC}${eGreen}."
				fi
			else
				printf "Must be on \"$(printf "${StartingHosts}" | sed -e 's/ / or /')\" to update servers\n"
				exit 2
			fi
		else
			printf "  ${eYellow}${DestUserHost} "
			printf "%s${eNC}(${eRed}Skipped${eNC} server down)"
		fi
		printf " (${eYellow}$SECONDS sec.${eNC})\n"
	done
else
	printf "\n${ScriptName} cancelled...\n"
	echo ${OldVer} > ${VerFile}
fi
printf "\nTotal update time: $(convertsecs $(($(date +'%s') - $start)))\n\n" ) 2>${ScriptName}.err
}

show_time () {
  num=$1
  min=0
  hour=0
  day=0
  if((num>59));then
    ((sec=num%60))
    ((num=num/60))
    if((num>59));then
      ((min=num%60))
      ((num=num/60))
      if((num>23));then
        ((hour=num%24))
        ((day=num/24))
      else
        ((hour=num))
      fi
    else
      ((min=num))
    fi
  else
    ((sec=num))
  fi
echo "$day" days "$hour" hrs. "$min" min. "$sec" sec.
}
export -f show_time

getrsxname () {
  BN=${1}
  echo "${BN%.*}x.conf"
}  
export -f getrsxname

ctar () {
	ACTION=`echo ${1/-//}`
	ACTION=`echo ${1/c/r}`
	
	if [ ${ACTION:0:1} != "r" ]; then
		echo "Usage: ctar [-][c|r]f OutFileName.tar FileDirName"
		return 1
		exit
	fi
	OUTFILE=`echo ${2/.tgz/.tar}`
	OUTFILE=`echo ${2/.tar.gz/.tar}`
	CURRENT=0
	echo "Activity: tar ${1} ${OUTFILE} ${3} [$SIZE] ${4} ${5}"
	for FILE in $(find ${3} -type f); do 
		tar ${ACTION} ${OUTFILE} $FILE
		CURRENT=$(($CURRENT+$(du -s $FILE | cut -f 1)))
		echo -en "\r"$((100*($CURRENT-1)/$TOTAL+1))"%"
	done
	bar ${OUTFILE} | gzip > ${OUTFILE}.gz
	rm ${OUTFILE}
}

xtar () {
	ACTION=${1:0:1}
	if [ ${ACTION} != "x" ]; then
		echo "Usage: xtar xf OutFileName.tgz [-C TargetDirectory]"
		return 1
		exit
	fi
#	(pv -n ${2} | tar xzf - ${3} ${4} ) 2>&1 | dialog --gauge "Running tar, please wait..." 10 70 0
	(bar -n -w 79 ${2} | tar xzpf - ${3} ${4})
}

historysum () {
	history|awk '{a[$2]++}END{for(i in a){printf"%5d\t%s\n",a[i],i}}'|sort -nr|head -n 20
}

ccd () {
	if [ "$1" == "" ]; then
		echo "Usage: ccd location"
		shift
	elif [ -d "$1" ]; then
		#if it is a directory, go there
		cd "$1"
	else #must not be a directory
		# Cut off filename and cd to the containing directory
		cd "${1%/*}"
	fi
}

man () {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
			man "$@"
}

exfile () {
	if [ -z "$1" ]; then
		# display usage if no parameters given
		echo "Usage: $0 <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
	else
	pushd ~ > /dev/null 2>&1
		if [ -f $1 ] ; then
			basename=$filename; fileext=""
			while case $basename in
				?*.*)		case ${basename##*.} in [A-Za-z]*|7z) true;; 
					*) false;; esac;;
				*) false;; esac
			do
			fileext=${basename##*.}.$fileext
			basename=${basename%.*}
			done
			fileext=${fileext%.}
			echo -ne ${basename}\\n
			echo -ne ${fileext}\\n
			if [ -d $basename ] ; then
				cd $basename
			else					 
				mkdir $basename && cd $basename
			fi
				case ${fileext} in
					bz2)	tar xvjf ../$1		;;
					gz)		tar xvzf ../$1		;;
					xz)		tar xvJf ../$1		;;
					lzma)	unlzma ../$1			;;
					bz2)	bunzip2 ../$1		 ;;
					rar)	unrar x -ad ../$1 ;;
					gz)		gunzip ../$1			;;
					tar)	tar xvf ../$1		 ;;
					tbz2)	tar xvjf ../$1		;;
					tgz)	tar xvzf ../$1		;;
					zip)	unzip ../$1			 ;;
					Z)		uncompress ../$1	;;
					7z)		7z x ../$1				;;
					xz)		unxz ../$1				;;
					exe)	cabextract ../$1	;;
					*)			echo "exfile: '$1' - unknown archive method" ;;
				 esac
			cd ..
		else
			echo "$1 - file does not exist"
		fi
	fi
	popd > /dev/null 2>&1
	dirs -c > /dev/null 2>&1
}

findlarger () {
	find . -type f -size +${1}c
}

fawk () {
	first="awk '{print "
	last="}'"
	cmd="${first}\$${1}${last}"
	eval $cmd
}

#alias ipinfo=ifconfig eth0; iwconfig wlan0

ipext () {
  wget http://ipecho.net/plain -O - -q ; echo
  #if [ "${OS}" = "Darwin" ]; then
  #	dig +short myip.opendns.com @resolver1.opendns.com
  #else
  #  hostname -I
  #fi
}

function valid_ip () {
  local  ip=$1

  if [ -z ${ip} ]; then
    printf "Usage: valid_ip IP_ADDRESS\n"
  else
    local  stat=1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    printf "$stat"
    return $stat
  fi
}
export -f valid_ip
ipmine () {
if [ "${OS}" = "Darwin" ]; then
	ipconfig getifaddr $(networkservice.sh x)
else
  hostname -I
#	/sbin/ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'|sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ + /g'
fi
}

ipall () {
if [ "${OS}" = "Darwin" ]; then
		printf "$(ipext) $(ipmine)"|sed -e 's/ / + /g'
else
		printf "$(ipext) $(ipmine)" |sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g'|sed -e 's/ / + /g'
		printf "\n"
fi
}

isalive () {
	if [ -z $1 ]; then
		echo "Usage: $0 {192.168.1.10|44x.biz}"
		return 1
	fi
	IP=${1}
	ServerStatus=$(ping -c1 -W1 ${IP} > /dev/null && echo "up" || echo "down")
	printf "\nServer: ${IP} is ${ServerStatus}.\n\n"
}

ipnet () {
	if [ "${OS}" = "Darwin" ]; then
		IP="$(/usr/sbin/ipconfig getifaddr en0|cut -d '.' -f 1-3)."
	else
		IP="$(/sbin/ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'| sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g'| cut -d '.' -f 1-3)."
	fi
	echo -e "Nodes: .0 and .255 excluded"
	xx=0
	{ for i in ${IP}{1..254}
	do
		if [ $xx -lt 22 ]; then
			ServerStatus=$(ping -c1 -W1 ${i} > /dev/null && echo "up" || echo "down")
			printf "${i} is ${ServerStatus}\n"
			xx=$((xx + 1))
		else
			ServerStatus=$(ping -c1 -W1 ${i} > /dev/null && echo "up" || echo "down")
			printf "${i} is ${ServerStatus}\n"
			read -n 1 -s -r -p "Press any key to continue" 
			clear
			echo -e "Nodes: .0 and .255 excluded"
			xx=0
		fi
	done } # | sed -e '/^\[.*$/d' | sort -t . -n -k 4
}
