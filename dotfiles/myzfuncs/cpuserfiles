cpuserfiles () {
( cd ~
printf "$(pwd)"
ScriptName="cpuserfiles"
trash ${ScriptName}.*
if [ -z ${1} ]; then
	printf "Usage: cpuserfiles DestUserHost
"
	return
else
	DestUserHost=${1}
	DestHost=$(printf "${DestUserHost}" | cut -d @ -f2)
	ServerStatus="$(ping -c1 -W1 ${DestHost} > /dev/null && echo \"up\" || echo \"down\")"
	StartingHosts=" sneezy "
	LocalHost="$(hostname -s)"
	ThisHost="joe@${LocalHost}"
	SITES2="root@sneezy root@y4x.biz"
	FileName="UserFiles.tgz"
	BackupDir="ufBackup/"
	SkelDir="/etc/skel/"
	VerFile=".zsh_shver"
	OldVer="$(< ${VerFile})"
	NewVer="`echo $OldVer + .001 | bc`"
	ThisVer="$OldVer"
	RFolder="~/"
	printf "
Current $(fg_cyan "${FileName} ") Version: $(fg_green "${OldVer}")"
	printf "
Increment Version:$(fg_green "${OldVer}") to $(fg_red "${NewVer}:") (Y/N)? "
	read answer
	if echo "$answer" | grep -i --color=auto -iq "^y"; then
		ThisVer="${NewVer}"
		echo ${ThisVer} > ${VerFile}
		cp ${FileName} ${BackupDir}${FileName}-${OldVer}
		printf "  Backup... $(fg_cyan "${FileName}") to $(fg_cyan "${FileName}-${OldVer}")"
		( cd ${BackupDir};ls -1tr | head -n -20 | xargs -d '
' rm -f -- )
		trash mkuserfile.*	# Delete old .out/.err files
		mkuserfile      # Compile a UserFiles.tgz file
	else
		ThisVer="${OldVer}"
	fi
	printf "Update $(fg_cyan "${FileName}") (ver:$(fg_red "${ThisVer}") on $(fg_green "${DestUserHost}") (Y/N) "
	read answer
	SECONDS=0
	if echo "$answer" | grep -i --color=auto -iq "^y"; then
		SECONDS=0
		DestUser=$(echo ${DestUserHost} | cut -d @ -f1)
		if [ "${ServerStatus}" = "up" ]; then
			if [[ "${StartingHosts}" =~ "${LocalHost}" ]]; then
				printf "Updating $(fg_cyan "${FileName}") Version:$(fg_red "${ThisVer}") to:

"
				if [ "${DestUserHost}" != "${ThisHost}" ]; then
					printf "  $(fg_yellow "${DestUserHost}")"
			# 	ssh ${DestUserHost} "trash ~/.swaksp"
					scp -Cp ${FileName} ${DestUserHost}:${RFolder} >/dev/null
					# >> ${ScriptName}.out
					fg_green "."
					ssh ${DestUserHost} "trash ${RFolder}.vim >/dev/null"
					fg_green "."
					cat ${FileName}|ssh ${DestUserHost} "tar xzf - -C ${RFolder}"
					fg_green "."
					CatVersion=$(ssh ${DestUserHost} "cat ${RFolder}${VerFile}")
					printf "($(fg_cyan "v:")${CatVersion} (skel)"
					if [[ ${SITES2} =~ "${DestUserHost}" ]] && [ ${DestUser} = "root" ]; then
						ssh ${DestUserHost} "cp -a ${RFolder}${FileName} ${SkelDir}"
						fg_green "."
						cat ${FileName}|ssh ${DestUserHost} "tar xzf - -C ${SkelDir}"
						fg_green "."
						CatVersion=$(ssh ${DestUserHost} "cat ${SkelDir}${VerFile}")
						fg_green "."
						printf "($(fg_cyan "v:")${CatVersion})"
					else
						fg_red " x"
					fi
				else
					fg_yellow "	${DestUserHost} "
					fg_red "(Skipped)"
				fi
				printf "($(fg_yellow "$SECONDS sec."))"
			else
				printf "Must be on \"$(printf "${StartingHosts}" | sed -e 's/ / or /')\" to update servers
"
			fi
		else
			fg_yellow "	${DestUserHost} "
			printf "$(fg_red "Skipped") server down)
"
		fi
	else
		printf "
${ScriptName} cancelled...
"
		echo ${OldVer} > ${VerFile}
	fi
fi
duration=${SECONDS}
printf "
$(show_time ${duration} "$(fg_green "Total Update Time")")
"
printf "

" ) 2>${ScriptName}.err
}
